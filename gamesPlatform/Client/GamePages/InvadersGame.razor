@page "/invaders"
@inject IJSRuntime jsRuntime
@inject IScoreService scoreService
@implements IDisposable
@inherits GamePage<Space>
@using cmArcade.Shared.Invaders
@using cmArcade.Client.GenericPages

<main id="main-content">
    <div id="game-controls">
        <button type="button" class="soft-shadow game-button @((currentScore.scoreValue > 0 && gameControl.Enabled && gameOver == true) ? "dark-bg on" : "")" @onclick=StartGame>start</button>
        <button type="button" class="soft-shadow game-button" @onclick=ResetGame>reset</button>
    </div>
    <div id="game-container" tabindex="0" @onkeydown=@((e) => KeyDownHandler(e.Key)) @onkeyup=@((e) => KeyUpHandler(e.Key)) @onclick=ClickHandler>
        <GameCanvas @ref=gameScreen appID=_myID />
        @if (currentScore?.turn > 0 && gameOver)
        {
            <PostGameView currentScore=currentScore highScore=highScore appID=_myID />
        }
    </div>
</main>

@foreach (var id in assetList)
{    
    <GameImageAsset assetID=@id appID=@_myID />
}

@code {
    private GameCanvas? gameScreen;
    private double scale;
    private bool combo = false;

    private Timer invaderControl;

    private bool gameOver = false;
    private bool showScoreUpload = false;

    public InvadersGame() : base(AppID.Invaders)
    {
        invaderControl = new Timer(800) { AutoReset = true, Enabled = false };
        gameControl.Interval = 15;
        scale = 1;
        assetList.AddRange(ShipModel.invaderShips.Select(s => s.spriteId));
        assetList.AddRange(GameDecal.invaderDecals.Select(s => s.spriteId));
        assetList.Add(ShipModel.playerShip.spriteId);
        assetList.Add("heart");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (gameScreen != null)
            {
                await gameScreen.SetCanvasSize();
                game = new Space(gameScreen.GetDimensions());
                gameScreen.SetupImageAsset(assetList);
            }
            highScore = await scoreService.readLocalScore(_myID);
            invaderControl.Elapsed += InvadersStep;
            gameControl.Elapsed += RunGame;
            canvasRefresh.Elapsed += DrawGame;
            StateHasChanged();
        }
    }

    protected async override void RunGame(Object? o, ElapsedEventArgs e)
    {
        game.UpdateGameState(currentScore);
    }

    protected override async Task StartGame()
    {
        await jsRuntime.InvokeVoidAsync("setFocus");
        if (gameControl.Enabled && gameOver == false)
            return;
        else
        {
            if (gameOver)
                ResetGame();
            currentScore.turn = 1;
            currentScore.runStart = DateTime.Now;
            ToggleControlObjects();
        }
    }

    protected override async Task ResetGame()
    {
        await jsRuntime.InvokeVoidAsync("setFocus");
        if (gameControl.Enabled) 
            ToggleControlObjects();

        currentScore = new Score(_myID);
        game = new Space(gameScreen.GetDimensions());
        gameOver = false;
    }

    protected new void ToggleControlObjects()
    {
        gameControl.Enabled = !gameControl.Enabled;
        invaderControl.Enabled = !invaderControl.Enabled;
        canvasRefresh.Enabled = !canvasRefresh.Enabled;
    }

    private async Task TriggerNextRound()
    {
        ToggleControlObjects();
        for (int i = 3; i != 0; i--)
        {
            gameScreen.FillCanvas("black");
            gameScreen.FillTextExtended($"Next round in {i}...", 50, 50, textStyle.font, textStyle.color);
            gameScreen.RenderQueue();
            await Task.Delay(1000);
        }
        game = new Space(gameScreen.GetDimensions());
        currentScore.turn++;
        game.SetScoreMultiplier(currentScore.turn);
        ToggleControlObjects();
    }

    protected override void KeyDownHandler(string key)
    {        
        game.ParseKeyDown(key);
    }

    protected override void KeyUpHandler(string key)
    {
        game.ParseKeyUp(key);
    }

    private void ClickHandler(MouseEventArgs e)
    {
        if (e.Button == 0 && !gameOver)
        {
            if (gameControl.Enabled)
            {
                game.ParseKeyDown(" ");
                return;
            }
        }
    }

    protected async override Task StopGame()
    {
        gameOver = true;
        currentScore.runLength = DateTime.Now - currentScore.runStart;
        if (currentScore.scoreValue > highScore.scoreValue)
        {
            highScore = currentScore;
            scoreService.setLocalScore(highScore);
        }
        ToggleControlObjects();
        StateHasChanged();
    }

    private void InvadersStep(Object? o, EventArgs e)
    {
        if (game.invaders.Count == 0) 
            TriggerNextRound();

        game.UpdateInvaderState();
        SetScore(game.invaderCleanup());
        if (game.CheckGameOver()) 
            StopGame();

        invaderControl.Interval = (game.invaders.Count / 0.05) / currentScore.turn;
        game.InvaderAttack();
        game.SpawnSpecialInvader();
    }

    private void SetScore(int score)
    {
        currentScore.scoreValue += currentScore.turn * score * (combo ? 2 : 1);
        combo = score != 0;
    }

    private void DrawUI()
    {
        gameScreen.FillTextExtended(GetUIText(), 10, 20, textStyle.font, textStyle.color);
        for (int i = 1; i <= game.player.healthPoints; i++)
        {
            gameScreen.DrawSimpleImage("heart", gameScreen.componentWidth - (40 * i), 10);
        }
    }

    private string GetUIText()
    {
        return
            $"Score:{currentScore.scoreValue}\t" +
            $"Best:{highScore.scoreValue}\t" +
            $"Level:{currentScore.turn}";
    }

    protected async override void DrawGame(Object? o, ElapsedEventArgs e)
    {
        gameScreen.FillCanvas("black");
        DrawUI();
        gameScreen.DrawObjectSet(game.invaders);
        gameScreen.DrawObjectSet(game.shotsFired);
        gameScreen.DrawObjectSet(game.barriers);
        gameScreen.DrawObject(game.player);
        if (game.specialInvader != null) 
            gameScreen.DrawObject(game.specialInvader);

        await gameScreen.RenderQueue();
    }

    public override void DisposeHarder()
    {
        gameScreen?.Dispose();
        invaderControl.Dispose();
    }
}
