@page "/invaders"
@inject IJSRuntime jsRuntime
@inject IScoreService scoreService

<main id="main-content">
    <div id="game-controls">
        <div id="score-display">
            <span> Score:@currentScore?.scoreValue </span>
            @if (highScore?.scoreValue > 0)
            {
                <span> Best: @highScore?.scoreValue  </span>
            }
            <span> Round:@currentScore?.turn </span>
        </div>
        <div>
            <button type="button" class="soft-shadow game-button" @onclick=startGame>start</button>
            <button type="button" class="soft-shadow game-button" @onclick=resetGame>reset</button>
        </div>
    </div>
    <div id="game-container" tabindex="0" @onkeydown=keyDownInputHandler @onkeyup=keyUpInputHandler>
        <ResponsiveCanvas @ref=gameScreen appID=AppID.Invaders />
    </div>
</main>

<img class="visually-hidden" src="/img/invaderAssets/invader assets.png" @ref=@invaderAssets />
<img class="visually-hidden" src="/img/invaderAssets/player assets.png" @ref=@playerAssets />

@code {
    private ResponsiveCanvas gameScreen;
    private (int row, int col) limits;
    private Score currentScore;
    private Score highScore;

    private Timer mainGameControl;
    private Timer invaderControl;

    private Space space;
    private ElementReference invaderAssets;
    private ElementReference playerAssets;

    public InvadersGame()
    {
        invaderControl = new Timer(800) { AutoReset = true, Enabled = false };
        invaderControl.Elapsed += updateInvaderState;
        mainGameControl = new Timer(10) { AutoReset = true, Enabled = false };
        mainGameControl.Elapsed += updateGameState;
        currentScore = new Score(AppID.Invaders);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await gameScreen.setCanvasSize();
            limits = gameScreen.getDimensions();
            space = new Space(limits);
            StateHasChanged();
        }
    }

    public void startGame()
    {
        jsRuntime.InvokeVoidAsync("setFocus");
        if (mainGameControl.Enabled)
            return;
        else
        {
            toggleControlObjects();
        }
    }

    public void toggleControlObjects()
    {
        mainGameControl.Enabled = !mainGameControl.Enabled;
        invaderControl.Enabled = !invaderControl.Enabled;
    }

    private void resetGame()
    {
        if (mainGameControl.Enabled)
            toggleControlObjects();
        currentScore = new Score(AppID.Invaders);
        space = new Space(limits);
        gameScreen.clear();
    }

    private void keyDownInputHandler(KeyboardEventArgs e)
    {
        space.parseKeyDown(e.Key, e.Repeat);
    }

    private void keyUpInputHandler(KeyboardEventArgs e)
    {
        space.parseKeyUp(e.Key);
    }

    public async void updateGameState(Object? o, ElapsedEventArgs e)
    {
        space.player.updatePosition(limits.row, limits.col);
        foreach (var s in space.shotsFired)
        {
            s.updatePosition();
        }
        space.hitCheck();
        space.shotCleanup(limits);
        drawGameState();
    }

    private async void updateInvaderState(Object? o, EventArgs e)
    {
        bool touchedEdge = false;
        space.invaders.ForEach(i => { 
            if (i.updatePosition(limits.row, limits.col)) touchedEdge = true;
            i.model.spriteSelect = i.model.spriteSelect == 0 ? 1 : 0;
        });
        if (touchedEdge) 
        {
            AlienShip.flipDirection();
            space.invaders.ForEach(i =>
                {
                    i.dropRow(limits.row);
                    i.updatePosition(limits.row, limits.col);
                });
        }
        space.invaders.RemoveAll(i => { 
            if (i.healthPoints <= 0)
            {
                currentScore.scoreValue += Space.baseScore / i.model.type;
                return true;
            }
            else
                return false;
        });
        space.invaderAttack();
        // TODO - speed up 
    }

    private async void drawGameState()
    {
        await gameScreen.clear();
        await gameScreen.canvasReference.BeginBatchAsync();

        var p = space.player;
        await gameScreen.canvasReference.DrawImageAsync(
            playerAssets,
            p.stepCount * p.model.width, 1 * p.model.height,
            p.model.width, p.model.height,
            p.col + 1, p.row + p.model.height - 5,
            p.model.width, p.model.height);
        await gameScreen.canvasReference.DrawImageAsync(
            playerAssets,
            p.model.spriteSelect * p.model.width, p.model.spriteRow * p.model.height,
            p.model.width, p.model.height,
            p.col, p.row,
            p.model.width, p.model.height);

        await gameScreen.canvasReference.SetFillStyleAsync("yellow");
        foreach (var s in space.shotsFired)
        {
            await gameScreen.canvasReference.FillRectAsync(s.col, s.row, 4, LaserShot.length);
        }

        foreach (var a in space.invaders)
        {
            await gameScreen.canvasReference.DrawImageAsync(
                invaderAssets, //asset
                a.model.spriteSelect * a.model.width, a.model.spriteRow * a.model.height, //asset position on sheet
                a.model.width, a.model.height, //asset scale
                a.col, a.row, //render coords
                a.model.width, a.model.height); //render scale
        }

        await gameScreen.canvasReference.EndBatchAsync();
    }
}
