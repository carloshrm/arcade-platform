@page "/invaders"
@inject IJSRuntime jsRuntime
@inject IScoreService scoreService
@implements IDisposable
@using cmArcade.Shared.Invaders

<main id="main-content">
    <div id="game-controls">
        <button type="button" class="soft-shadow game-button @((currentScore.scoreValue > 0 && spaceControl.Enabled) ? "dark-bg on" : "")" @onclick=startGame>start</button>
        <button type="button" class="soft-shadow game-button" @onclick=resetGame>reset</button>
    </div>
    <div id="game-container" tabindex="0" @onkeydown=keyDownInputHandler @onkeyup=keyUpInputHandler @onclick=clickHandler>
        <GameCanvas @ref=gameScreen appID=AppID.Invaders />
        @if (currentScore?.turn > 0 && gameOver)
        {
            <div id="post-game-container" class="dark-bg soft-shadow">
                <h2>Game Over...</h2>
                <h4>Score: @currentScore?.scoreValue</h4>
                <h4>Best: @highScore?.scoreValue</h4>
                @if (canUpload)
                {
                    <button type="button" @onclick=@(() => showScoreUpload = true )>Upload!</button>
                }
                <LeaderboardView appID=AppID.Invaders @ref=leaderboard />
            </div>
            @if (showScoreUpload && canUpload)
            {
                <ScoreUpload info=@highScore callback=@uploadCallback />
            }
        }
    </div>
</main>

@foreach (var id in new List<string>().Concat(ShipModel.invaderShips.Keys).Concat(GameDecal.invaderDecals.Keys))
{
    <img hidden src =@($"/img/invaderAssets/{id}.png") @ref=gameScreen.assets[id] />
}
<img hidden src=@($"/img/invaderAssets/{ShipModel.playerShip.spriteId}.png") @ref=@(gameScreen.assets[ShipModel.playerShip.spriteId]) />
<img hidden src=@($"/img/genericAssets/heart.png") @ref=@(gameScreen.assets["heart"]) />

@code {
    private GameCanvas? gameScreen;
    private double scale;
    private Score currentScore;
    private Score highScore;
    private bool combo = false;

    private Timer spaceControl;
    private Timer invaderControl;
    private Timer canvasRefresh;

    private Space game;

    // TODO - refactor into post game component
    // TODO - refactor score into service
    private bool gameOver = false;
    private bool canUpload = false;
    private bool showScoreUpload = false;
    private LeaderboardView? leaderboard;
    private Action<int> uploadCallback;

    public InvadersGame()
    {
        invaderControl = new Timer(800) { AutoReset = true, Enabled = false };
        spaceControl = new Timer(15) { AutoReset = true, Enabled = false };
        canvasRefresh = new Timer(1000/60) { AutoReset = true, Enabled = false };
        currentScore = new Score(AppID.Invaders);
        highScore = currentScore;
        scale = 1;
        uploadCallback = new Action<int>(refreshAfterUpload);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (gameScreen != null)
            {
                await gameScreen.setCanvasSize();
                await gameScreen.canvasReference.SetFontAsync("16px \"Press Start 2P\"");
                await gameScreen.canvasReference.SetFillStyleAsync("white");
                game = new Space(gameScreen.getDimensions());
            }
            highScore = await scoreService.readLocalScore(AppID.Invaders);
            canUpload = highScore.id == -1;
            invaderControl.Elapsed += invaderStep;
            spaceControl.Elapsed += runGame;
            canvasRefresh.Elapsed += drawGame;
            StateHasChanged();
        }
    }

    public async void runGame(Object? o, ElapsedEventArgs e)
    {
        game.updateGameState();
    }

    private void refreshAfterUpload(int newID)
    {
        showScoreUpload = false;
        if (newID != -1)
        {
            canUpload = false;
            highScore.id = newID;
            leaderboard.refresh();
        }
        StateHasChanged();
    }

    private void startGame()
    {
        jsRuntime.InvokeVoidAsync("setFocus");
        if (spaceControl.Enabled && !gameOver)
            return;
        else
        {
            if (gameOver)
                resetGame();
            currentScore.turn = 1;
            currentScore.runStart = DateTime.Now;
            toggleControlObjects();
        }
    }

    private void resetGame()
    {
        jsRuntime.InvokeVoidAsync("setFocus");
        if (spaceControl.Enabled) toggleControlObjects();
        currentScore = new Score(AppID.Invaders);
        game = new Space(gameScreen.getDimensions());
        gameOver = false;
        gameScreen.clear();
    }

    private void toggleControlObjects()
    {
        spaceControl.Enabled = !spaceControl.Enabled;
        invaderControl.Enabled = !invaderControl.Enabled;
        canvasRefresh.Enabled = !canvasRefresh.Enabled;
    }

    private async Task nextRound()
    {
        toggleControlObjects();
        for (int i = 3; i != 0; i--)
        {
            await gameScreen.canvasReference.DrawImageAsync(gameScreen.assets["bg"], 0, 0);
            await gameScreen.canvasReference.FillTextAsync($"Next round in {i}...", 50, 50);
            await Task.Delay(1000);
        }
        game = new Space(gameScreen.getDimensions());
        game.nextRound(currentScore.turn);
        currentScore.turn++;
        toggleControlObjects();
    }

    private void keyDownInputHandler(KeyboardEventArgs e)
    {
        game.parseKeyDown(e.Key);
    }

    private void keyUpInputHandler(KeyboardEventArgs e)
    {
        game.parseKeyUp(e.Key);
    }

    private void clickHandler(MouseEventArgs e)
    {
        if (e.Button == 0 && !gameOver)
        {
            if (spaceControl.Enabled) 
            {
                game.parseKeyDown(" ");
                return;
            }
            else
            {
                startGame();
            }
        }
    }

    private void stopGame()
    {
        gameOver = true;
        currentScore.runLength = DateTime.Now - currentScore.runStart;
        if (currentScore.scoreValue > highScore.scoreValue)
        {
            highScore = currentScore;
            scoreService.setLocalScore(highScore);
            canUpload = true;
        }
        toggleControlObjects();
        StateHasChanged();
    }

    private void invaderStep(Object? o, EventArgs e)
    {
        if (game.invaders.Count == 0) nextRound();
        game.updateSpaceState();
        setScore(game.invaderCleanup());
        if (game.checkGameOver()) stopGame();
        invaderControl.Interval = (game.invaders.Count / 0.05) / currentScore.turn;
        game.invaderAttack();
        game.sendSpecial();
    }

    private void setScore(int score)
    {
        currentScore.scoreValue += currentScore.turn * score * (combo ? 2 : 1);
        combo = score != 0;
    }

    private async Task drawUI()
    {
        await gameScreen.canvasReference.FillTextAsync(getUIText(), 10, 20);
        for (int i = 1; i <= game.player.healthPoints; i++)
        {
            await gameScreen.canvasReference.DrawImageAsync(gameScreen.assets["heart"], gameScreen.componentWidth - (40 * i), 10);
        }
    }

    private string getUIText()
    {
        var text = new StringBuilder();
        text.Append($"Score:{currentScore.scoreValue}\t");
        if (highScore.scoreValue > 0) text.Append($"Best:{highScore.scoreValue}\t");
        text.Append($"Level:{currentScore.turn}");
        return text.ToString();
    }

    private async void drawGame(Object? o, ElapsedEventArgs e)
    {
        await gameScreen.canvasReference.BeginBatchAsync();
        await gameScreen.fillColor("black");
        await drawUI();
        await gameScreen.drawSet(game.invaders);
        await gameScreen.drawSet(game.shotsFired);
        await gameScreen.drawSet(game.barriers);
        await gameScreen.drawObject(game.player);
        if (game.specialInvader != null) await gameScreen.drawObject(game.specialInvader);
        await gameScreen.canvasReference.EndBatchAsync();
    }

    public void Dispose()
    {
        gameScreen?.Dispose();
        invaderControl.Dispose();
        spaceControl.Dispose();
        canvasRefresh.Dispose();
    }
}
