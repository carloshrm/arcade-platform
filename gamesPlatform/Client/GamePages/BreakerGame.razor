@page "/breaker"
@inject IJSRuntime jsRuntime
@inject IScoreService scoreService
@implements IDisposable
@using cmArcade.Shared.Breaker

<main id="main-content">
    <div id="game-controls">
        <button type="button" class="soft-shadow game-button @((currentScore.scoreValue > 0 && gameControl.Enabled) ? "dark-bg" : "")" @onclick=startGame>start</button>
        <button type="button" class="soft-shadow game-button" @onclick=resetGame>reset</button>
    </div>
    <div id="game-container" tabindex="0" @onkeydown=keyDownInputHandler @onkeyup=keyUpInputHandler>
        <ResponsiveCanvas @ref=gameScreen appID=AppID.Breaker />
        @if (currentScore?.turn > 0 && gameOver)
        {
            <div id="post-game-container" class="dark-bg soft-shadow">
                <h2>Game Over...</h2>
                <h4>Score: @currentScore?.scoreValue</h4>
                <h4>Best: @highScore?.scoreValue</h4>
                @if (canUpload)
                {
                    <button type="button" @onclick=@(() => showScoreUpload = true )>Upload!</button>
                }
                <LeaderboardView appID=AppID.Breaker @ref=leaderboard />
            </div>
            @if (showScoreUpload && canUpload)
            {
                <ScoreUpload info=@highScore callback=@uploadCallback />
            }
        }
    </div>
</main>

<img hidden src=@($"/img/breakerAssets/player.png") @ref=@(gameScreen.assets[PadModel.playerPad.spriteId]) />
<img hidden src=@($"/img/breakerAssets/ball.png") @ref=@(gameScreen.assets[BallModel.breakerBall.spriteId]) />
<img hidden src=@($"/img/breakerAssets/crack.png") @ref=@(gameScreen.assets["crack"]) />
@foreach (var bm in BlockModel.blocks)
{
    <img hidden src=@($"/img/breakerAssets/{bm.spriteId}.png") @ref=@(gameScreen.assets[bm.spriteId]) />    
}
<img hidden src=@($"/img/genericAssets/heart.png") @ref=@(gameScreen.assets["heart"]) />

@code {
    private BreakerField game;

    private ResponsiveCanvas? gameScreen;
    private Score currentScore;
    private Score highScore;

    private Timer gameControl;
    private Timer canvasRefresh;
    private DateTime? holdStart;
    private TimeSpan timeHeld;

    private bool gameOver = false;
    private bool canUpload = false;
    private bool showScoreUpload = false;
    private LeaderboardView? leaderboard;
    private Action<int> uploadCallback;

    public BreakerGame()
    {
        gameControl = new Timer(10) { AutoReset = true, Enabled = false };
        canvasRefresh = new Timer(1000 / 60) { AutoReset = true, Enabled = false };
        currentScore = new Score(AppID.Breaker);
        highScore = currentScore;
        holdStart = null;
        timeHeld = TimeSpan.Zero;
        uploadCallback = new Action<int>(refreshAfterUpload);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (gameScreen != null)
            {
                await gameScreen.setCanvasSize();
                await gameScreen.canvasReference.SetFontAsync("16px \"Press Start 2P\"");
                await gameScreen.canvasReference.SetFillStyleAsync("white");
                game = new BreakerField(gameScreen.getDimensions());
            }
            highScore = await scoreService.readLocalScore(AppID.Breaker);
            canUpload = highScore.id == -1;
            gameControl.Elapsed += runGame;
            canvasRefresh.Elapsed += drawGame;
            StateHasChanged();
        }
    }

    private void refreshAfterUpload(int newID)
    {
        showScoreUpload = false;
        if (newID != -1)
        {
            canUpload = false;
            highScore.id = newID;
            leaderboard.refresh();
        }
        StateHasChanged();
    }

    private void toggleControlObjects()
    {
        gameControl.Enabled = !gameControl.Enabled;
        canvasRefresh.Enabled = !canvasRefresh.Enabled;
    }

    private void startGame() 
    {
        jsRuntime.InvokeVoidAsync("setFocus");
        if (gameControl.Enabled)
            return;
        else
        {
            if (currentScore.scoreValue > 0)
                resetGame();
            currentScore.turn = 1;
            currentScore.runStart = DateTime.Now;
            toggleControlObjects();
        }
    }

    private void resetGame()
    {
        jsRuntime.InvokeVoidAsync("setFocus");
        if (gameControl.Enabled) toggleControlObjects();
        currentScore = new Score(AppID.Breaker);
        game = new BreakerField(gameScreen.getDimensions());
        gameOver = false;
        gameScreen.clear();
    }

    private void stopGame()
    {
        gameOver = true;
        toggleControlObjects();
        currentScore.runLength = DateTime.Now - currentScore.runStart;
        if (currentScore.scoreValue > highScore.scoreValue)
        {
            highScore = currentScore;
            scoreService.setLocalScore(highScore);
            canUpload = true;
        }
        StateHasChanged();
    }

    private void keyDownInputHandler(KeyboardEventArgs e)
    {
        game.parseKeyDown(e.Key);
    }

    private void keyUpInputHandler(KeyboardEventArgs e)
    {
        game.parseKeyUp(e.Key);
    }

    private string getUIText()
    {
        var text = new StringBuilder();
        text.Append($"Score:{currentScore.scoreValue}\t ");
        if (highScore.scoreValue > 0) text.Append($"Best:{highScore.scoreValue}\t ");
        text.Append($"Time:{currentScore.runLength.ToString("mm\\:ss")} ");
        text.Append($"Level:{currentScore.turn}");
        return text.ToString();
    }

    private async void runGame(Object? o, ElapsedEventArgs e)
    {
        currentScore.scoreValue += game.updateFieldState();
        if (game.ballOnHold) 
        {
            if (holdStart == null)
                holdStart = DateTime.Now;
        } else
        {
            if (holdStart != null)
            {
                timeHeld += (DateTime.Now - (holdStart ?? DateTime.Now));
                holdStart = null;
            }
            currentScore.runLength = (DateTime.Now - timeHeld) - currentScore.runStart;
        }
        if (game.checkGameOver()) stopGame();
    }

    private async void drawGame(Object? o, ElapsedEventArgs e)
    {
        await gameScreen.canvasReference.BeginBatchAsync();        
        await gameScreen.fillColor("black");
        await gameScreen.canvasReference.FillTextAsync(getUIText(), 10, 20);
        if (game.ballOnHold)
        {
            await gameScreen.canvasReference.FillTextAsync("hit spacebar to release the ball", gameScreen.componentWidth / 4, gameScreen.componentWidth / 2);
        }
        for (int i = 1; i <= game.player.healthPoints; i++)
        {
            await gameScreen.canvasReference.DrawImageAsync(gameScreen.assets["heart"], gameScreen.componentWidth - (40 * i), 10);
        }
        await gameScreen.drawObject(game.player);
        await gameScreen.drawSet(game.balls);
        await gameScreen.drawSet(game.blocks);
        await gameScreen.canvasReference.EndBatchAsync();
        
    }

    public void Dispose()
    {
        gameScreen?.Dispose();
        gameControl.Dispose();
        canvasRefresh.Dispose();
    }
}
