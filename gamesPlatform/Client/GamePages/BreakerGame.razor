@page "/breaker"
@inject IScoreService scoreService
@implements IDisposable
@inherits GamePage<BreakerField>
@using cmArcade.Shared.Breaker

<main id="main-content" @onkeydown:preventDefault=@(!gameOver)>
    <div id="game-controls">
        <button type="button" class="soft-shadow game-button @((currentScore.scoreValue > 0 && gameControl.Enabled) ? "dark-bg ok" : "")" @onclick=StartGame>start</button>
        <button type="button" class="soft-shadow game-button" @onclick=ResetGame>reset</button>
    </div>
    <div id="game-container" tabindex="0" @onkeydown=@((e) => KeyDownHandler(e.Key)) @onkeyup=@((e) => KeyUpHandler(e.Key))>
        <GameCanvas @ref=gameScreen appID=_myID />
        @if (currentScore?.turn > 0 && gameOver)
        {
            <PostGameView currentScore=currentScore highScore=highScore appID=_myID />
        }
    </div>
    @if (isMobile)
    {
        <TouchPad clickCallback=KeyDownHandler releaseCallback=KeyUpHandler />
    }
</main>

@foreach (var id in assetList)
{
    <GameImageAsset assetID=@id appID=@_myID />
}

@code {
    private GameCanvas? gameScreen;

    private DateTime? holdStart;
    private TimeSpan timeHeld;

    private bool gameOver = false;

    private bool isMobile = false;
    private bool mobileMoveToggle = false;

    public BreakerGame() : base(AppID.Breaker)
    {
        gameControl.Interval = 10;
        holdStart = null;
        timeHeld = TimeSpan.Zero;
        assetList.AddRange(BlockModel.blocks.Select(b => b.spriteId));
        assetList.AddRange(PowerUpModel.breakerPowerUps.Values.Select(v => v.spriteId));
        assetList.AddRange(GameDecal.breakerDecals.Select(v => v.spriteId));
        assetList.AddRange(new List<string>
            {
                PadModel.playerPad.spriteId,
                BallModel.breakerBall.spriteId,
                "crack", "heart"
            });
    }

    protected override async Task OnInitializedAsync()
    {
        isMobile = GameCanvas.IsBrowserMobile();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (gameScreen != null)
            {
                gameScreen.SetCanvasSize();
                game = new BreakerField(gameScreen.GetDimensions());
            }
            highScore = await scoreService.readLocalScore(_myID);
            gameControl.Elapsed += RunGame;
            canvasRefresh.Elapsed += DrawGame;
            StateHasChanged();
        }
    }

    protected async override Task StartGame()
    {
        GameCanvas.SetWindowFocus();
        if (gameControl.Enabled)
            return;
        else
        {
            if (currentScore.scoreValue > 0)
                await ResetGame();
            currentScore.turn = 1;
            currentScore.runStart = DateTime.Now;
            ToggleControlObjects();
        }
    }

    protected override async Task ResetGame()
    {
        GameCanvas.SetWindowFocus();
        if (gameControl.Enabled) ToggleControlObjects();
        currentScore = new Score(_myID);
        game = new BreakerField(gameScreen!.GetDimensions());
        gameOver = false;
        gameScreen.ForceCanvasClear();
    }

    protected override async Task StopGame()
    {
        gameOver = true;
        ToggleControlObjects();
        currentScore.runLength = DateTime.Now - currentScore.runStart;
        if (currentScore.scoreValue > highScore.scoreValue)
        {
            highScore = currentScore;
            await scoreService.setLocalScore(highScore);
        }
        StateHasChanged();
    }

    protected override void KeyDownHandler(string key)
    {
        game.ParseKeyDown(key);
    }

    protected override void KeyUpHandler(string key)
    {
        game.ParseKeyUp(key);
    }

    private string MakeUIText()
    {
        return 
            $"Score:{currentScore.scoreValue}x{game.fieldScoreMultiplier} \t " +
            (highScore.scoreValue > 0 ? $"Best{highScore.scoreValue} \t" : "") +
            $"Time:{currentScore.runLength.ToString("mm\\:ss")} " +
            $"Depth:{currentScore.turn}";
    }

    protected async override void RunGame(Object? o, ElapsedEventArgs e)
    {
        game.UpdateGameState(currentScore);
        if (game.ballOnHold)
        {
            if (holdStart == null)
                holdStart = DateTime.Now;
        }
        else
        {
            if (holdStart != null)
            {
                timeHeld += (DateTime.Now - (holdStart ?? DateTime.Now));
                holdStart = null;
            }
            currentScore.runLength = (DateTime.Now - timeHeld) - currentScore.runStart;
        }
        if (game.CheckGameOver())
            await StopGame();
    }

    protected async override void DrawGame(Object? o, ElapsedEventArgs e)
    {
        gameScreen.FillCanvas("black");
        gameScreen.FillTextExtended(MakeUIText(), 10, 20, textStyle);

        for (int i = 0; i < game.fieldMessages.Count; i++)
            gameScreen.FillTextExtended(game.fieldMessages[i], 0, (gameScreen.GetDimensions().y / 2) + (i * 20), "10px \"Press Start 2P\"", "yellow");

        if (game.ballOnHold)
            gameScreen.FillTextExtended("hit spacebar or up to release the ball", (gameScreen.GetDimensions().x * 0.3f), (gameScreen.GetDimensions().y * 0.8f), textStyle);

        for (int i = 1; i <= game.player.healthPoints; i++)
            gameScreen.DrawSimpleImage("heart", gameScreen.componentWidth - (40 * i), 10);

        gameScreen.DrawObject(game.player);
        gameScreen.DrawObjectSet(game.balls);
        gameScreen.DrawObjectSet(game.powerups);
        game.blocks.ForEach(r => gameScreen.DrawObjectSet(r));
        gameScreen.RenderQueue();
    }

    public override void DisposeHarder()
    {
        gameScreen?.Dispose();
    }
}
