@page "/tetris"
@inject IScoreService scoreService
@implements IDisposable
@inherits GamePage<TetrisField>
@using cmArcade.Shared
@using cmArcade.Shared.Tetris

<main id="main-content" @onkeydown:preventDefault=@(!gameOver)>
    <div id="game-controls">
        <button type="button" class="soft-shadow game-button @((currentScore.scoreValue > 0 && gameControl.Enabled) ? "dark-bg ok" : "")" @onclick=StartGame>start</button>
        <button type="button" class="soft-shadow game-button" @onclick=ResetGame>reset</button>
    </div>
    <div id="game-container" tabindex="0" @onkeydown=@((e) => KeyDownHandler(e.Key)) @onkeyup=@((e) => KeyUpHandler(e.Key))>
        <GameCanvas @ref=gameScreen appID=_myID />
        @if (currentScore?.turn > 0 && !gameControl.Enabled)
        {
            <PostGameView currentScore=currentScore highScore=highScore appID=_myID />
        }
    </div>
    @if (isMobile)
    {
        <TouchPad clickCallback=KeyDownHandler releaseCallback=KeyUpHandler />
    }
</main>

@foreach (var id in assetList)
{
    <GameImageAsset assetID=@id appID=@_myID />
}

@code {
    private GameCanvas? gameScreen;

    private bool gameOver = false;

    private bool isMobile = false;
    private bool mobileMoveToggle = false;

    public TetrisGame() : base(AppID.Tetris)
    {
        assetList.Add(TetrisPlayerModel.player.spriteId);
    }

    protected override async Task OnInitializedAsync()
    {
        isMobile = GameCanvas.IsBrowserMobile();
        if (isMobile)
            textStyle = ("8px \"Press Start 2P\"", "white");
        highScore = await scoreService.readLocalScore(_myID);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (gameScreen != null)
            {
                gameScreen.SetCanvasSize();
                game = new TetrisField(gameScreen.GetDimensions());
            }
            gameControl.Interval = 800;
            gameControl.Elapsed += RunGame;
            canvasRefresh.Elapsed += DrawGame;
            StateHasChanged();
        }
    }

    protected async override Task StartGame()
    {
        GameCanvas.SetWindowFocus();
        if (gameControl.Enabled)
            return;
        else
        {
            if (currentScore.scoreValue > 0)
                await ResetGame();
            currentScore.turn = 1;
            currentScore.runStart = DateTime.Now;
            ToggleControlObjects();
        }
    }

    protected async override Task ResetGame()
    {
        GameCanvas.SetWindowFocus();
        if (gameControl.Enabled)
            ToggleControlObjects();

        gameControl.Interval = 1000;
        currentScore = new Score(_myID);
        game = new TetrisField(gameScreen.GetDimensions());
        gameOver = false;
        gameScreen.ForceCanvasClear();
    }

    protected override async Task StopGame()
    {
        gameOver = true;
        ToggleControlObjects();
        if (currentScore.scoreValue > highScore.scoreValue)
        {
            highScore = currentScore;
            await scoreService.setLocalScore(highScore);
        }
        StateHasChanged();
    }

    protected override void KeyDownHandler(string key)
    {
        game.parseKeyDown(key);
    }

    protected override void KeyUpHandler(string key)
    {
        game.parseKeyUp(key);
    }

    private string getUIText()
    {
        return
            $"Time: \n  {currentScore.runLength.ToString("mm\\:ss")}\n" +
            $"Score:\n{currentScore.scoreValue}\n" +
            $" {game.scoreMult}x\n" +
            $"Best: \n  {highScore.scoreValue}\n \n" +
            "  Controls:\nA D/Arrows:\n  Move\nUp:\n  Rotate \nSpacebar:\n  Drop";
    }

    protected async override void RunGame(Object? o, ElapsedEventArgs e)
    {
        // currentScore.turn += 1;
        currentScore.runLength = DateTime.Now - currentScore.runStart;
        game.UpdateGameState(currentScore);
        if (game.CheckGameOver())
            await StopGame();

        gameControl.Interval = 1000 - ((game.scoreMult + 1) * 30);
    }

    protected async override void DrawGame(Object? o, ElapsedEventArgs e)
    {
        gameScreen.FillCanvas("black");
        gameScreen.DrawSimpleImage(TetrisPlayerModel.player.spriteId, 0, 0, gameScreen.componentWidth, gameScreen.componentHeight);
        gameScreen.FillTextExtended(getUIText(), gameScreen.componentWidth * 0.02f, 20, textStyle, 10);

        game.activePiece.parts.ForEach(p => gameScreen.DrawScaledObject(p));

        for (int i = 0; i < game.field.Length; i++)
        {
            for (int j = 0; j < game.field[i].Length; j++)
            {
                if (game.field[i][j] != null)
                    gameScreen.DrawScaledObject(game.field[i][j]);
            }
        }

        gameScreen.FillTextExtended("Next: ", gameScreen.componentWidth * 0.84f, 20, textStyle, 10);
        game.nextPieces.Peek().parts.ForEach(pt => gameScreen.DrawScaledObject(pt));
        gameScreen.RenderQueue();
    }

    public override void DisposeHarder()
    {
        gameScreen?.Dispose();
    }
}
