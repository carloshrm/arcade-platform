@page "/tetris"
@inject IJSRuntime jsRuntime
@inject IScoreService scoreService
@implements IDisposable
@inherits GamePage<TetrisField>
@using cmArcade.Shared
@using cmArcade.Shared.Tetris

<main id="main-content" @onkeydown:preventDefault="true">
    <div id="game-controls">
        <button type="button" class="soft-shadow game-button @((currentScore.scoreValue > 0 && gameControl.Enabled) ? "dark-bg ok" : "")" @onclick=StartGame>start</button>
        <button type="button" class="soft-shadow game-button" @onclick=ResetGame>reset</button>
    </div>
    <div id="game-container" tabindex="0" @onkeydown=@((e) => keyDownInputHandler(e.Key)) @onkeyup=@((e) => keyUpInputHandler(e.Key))>
        <GameCanvas @ref=gameScreen appID=_myID />
        @if (currentScore?.turn > 0 && !gameControl.Enabled)
        {
            <PostGameView currentScore=currentScore highScore=highScore app=_myID />
        }
    </div>
    @if (isMobile)
    {
        <TouchDPad clickCallback=keyDownInputHandler releaseCallback=keyUpInputHandler />
    }
</main>

<img hidden src=@($"/img/tetrisAssets/tetrisField.png") @ref=@(gameScreen.assets[TetrisPlayerModel.player.spriteId]) />

@code {
    private GameCanvas? gameScreen;

    private bool gameOver = false;

    private bool isMobile = false;
    private bool mobileMoveToggle = false;

    private string textStyle = "16px \"Press Start 2P\"";

    public TetrisGame() : base(AppID.Tetris)
    {
        ///
    }

    protected override async Task OnInitializedAsync()
    {
        isMobile = await jsRuntime.InvokeAsync<bool>("isMobile");
        if (isMobile)
            textStyle = "8px \"Press Start 2P\"";
        highScore = await scoreService.readLocalScore(_myID);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (gameScreen != null)
            {
                await gameScreen.setCanvasSize();
                await gameScreen.canvasReference.SetFontAsync(textStyle);
                await gameScreen.canvasReference.SetFillStyleAsync("white");
                game = new TetrisField(gameScreen.baseResolution);
            }
            gameControl.Interval = 1000;
            gameControl.Elapsed += RunGame;
            canvasRefresh.Elapsed += DrawGame;
            StateHasChanged();
        }
    }

    protected async override Task StartGame()
    {
        await jsRuntime.InvokeVoidAsync("setFocus");
        if (gameControl.Enabled)
            return;
        else
        {
            if (currentScore.scoreValue > 0)
                await ResetGame();
            currentScore.turn = 1;
            currentScore.runStart = DateTime.Now;
            ToggleControlObjects();
        }
    }

    protected async override Task ResetGame()
    {
        await jsRuntime.InvokeVoidAsync("setFocus");
        if (gameControl.Enabled)
            ToggleControlObjects();
        gameControl.Interval = 1000;
        currentScore = new Score(_myID);
        game = new TetrisField(gameScreen.baseResolution);
        gameOver = false;
        gameScreen?.clear();
    }

    protected override async Task StopGame()
    {
        gameOver = true;
        ToggleControlObjects();
        currentScore.runLength = DateTime.Now - currentScore.runStart;
        if (currentScore.scoreValue > highScore.scoreValue)
        {
            highScore = currentScore;
            await scoreService.setLocalScore(highScore);
        }
        StateHasChanged();
    }

    private void keyDownInputHandler(string dir)
    {
        game.parseKeyDown(dir);
    }

    private void keyUpInputHandler(string dir)
    {
        game.parseKeyUp(dir);
    }

    private string getUIText()
    {
        var uiInfo = new StringBuilder();
        uiInfo.AppendLine($"Time: \n  {currentScore.runLength.ToString("mm\\:ss")}\n");
        uiInfo.AppendLine($"Score:\n{currentScore.scoreValue}");
        uiInfo.AppendLine($"{game.scoreMult} lines\n");
        uiInfo.AppendLine($"Best: \n  {highScore.scoreValue}\n");
        uiInfo.AppendLine("Left-Right:\n  Move\nUp: \nSpin \nSpacebar:\n  Drop");
        return uiInfo.ToString();
    }

    protected async override void RunGame(Object? o, ElapsedEventArgs e)
    {
        currentScore.turn += 1;
        game.updateGameState(currentScore);
        if (game.checkGameOver())
            await StopGame();

        gameControl.Interval = 1000 - ((game.scoreMult + 1) * 20);
    }
     
    protected async override void DrawGame(Object? o, ElapsedEventArgs e)
    {
        await gameScreen.canvasReference.BeginBatchAsync();
        await gameScreen.fillColor("black");
        await gameScreen.canvasReference.DrawImageAsync(gameScreen.assets[TetrisPlayerModel.player.spriteId], 0, 0, gameScreen.componentWidth, gameScreen.componentHeight);
        await gameScreen.fillTextExtended(getUIText(), gameScreen.componentWidth * 0.02, 20, textStyle, "white", 10);

        game.active.parts.ForEach(async p => await gameScreen.drawScaledSimpleObject(p));

        for (int i = 0; i < game.field.Length; i++)
        {
            for (int j = 0; j < game.field[i].Length; j++)
            {
                if (game.field[i][j] != null)
                    await gameScreen.drawScaledSimpleObject(game.field[i][j]);
            }
        }

        await gameScreen.fillTextExtended("Next: ", gameScreen.componentWidth * 0.84, 20, textStyle, "white", 10);
        game.next.Peek().parts.ForEach(async pt => await gameScreen.drawScaledSimpleObject(pt));
        await gameScreen.canvasReference.EndBatchAsync();
    }

    public override void DisposeHarder()
    {
        gameScreen?.Dispose();
    }
}
