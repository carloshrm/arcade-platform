@page "/asteroids"

@inject IJSRuntime jsRuntime
@inject IScoreService scoreService
@implements IDisposable
@inherits GamePage<AsteroidsField>
@using cmArcade.Shared.Asteroids

<main id="main-content" @onkeydown:preventDefault="true">
    <div id="game-controls">
        <button type="button" class="soft-shadow game-button @((currentScore.scoreValue > 0 && gameControl.Enabled) ? "dark-bg ok" : "")" @onclick=startGame>start</button>
        <button type="button" class="soft-shadow game-button" @onclick=resetGame>reset</button>
    </div>
    <div id="game-container" tabindex="0" @onkeydown=@((e) => keyDownInputHandler(e.Key)) @onkeyup=@((e) => keyUpInputHandler(e.Key))>
        <GameCanvas @ref=gameScreen appID=_myID />
        @if (currentScore?.turn > 0 && gameOver)
        {
            <PostGameView currentScore=currentScore highScore=highScore app=_myID />
        }
    </div>
    @if (isMobile)
    {
        <TouchDPad clickCallback=keyDownInputHandler releaseCallback=keyUpInputHandler />
    }
</main>

@*<img hidden src=@($"/img/asteroidsAssets/{AsteroidModel.asteroidModels.First().spriteId}.png") @ref=@(gameScreen.assets[AsteroidModel.asteroidModels.First().spriteId]) />*@
@*<img hidden src=@($"/img/asteroidsAssets/{ShipModel.player.spriteId}.png") @ref=@(gameScreen.assets[ShipModel.player.spriteId]) />*@

@code {
    private GameCanvas? gameScreen;

    private bool gameOver = false;

    private bool isMobile = false;
    private bool mobileMoveToggle = false;

    private string textStyle = "16px \"Press Start 2P\"";

    public AsteroidsGame() : base(AppID.Asteroids)
    {
        gameControl.Interval = 10;
    }

    protected override async Task OnInitializedAsync()
    {
        isMobile = await jsRuntime.InvokeAsync<bool>("isMobile");
        if (isMobile)
            textStyle = "8px \"Press Start 2P\"";
        highScore = await scoreService.readLocalScore(_myID);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (gameScreen != null)
            {
                await gameScreen.setCanvasSize();
                await gameScreen.canvasReference.SetFontAsync(textStyle);
                await gameScreen.canvasReference.SetFillStyleAsync("white");
                game = new AsteroidsField(gameScreen!.getDimensions());
            }
            gameControl.Elapsed += runGame;
            canvasRefresh.Elapsed += drawGame;
            StateHasChanged();
        }
    }

    protected async override Task startGame()
    {
        await jsRuntime.InvokeVoidAsync("setFocus");
        if (gameControl.Enabled)
            return;
        else
        {
            if (currentScore.scoreValue > 0)
                await resetGame();
            currentScore.turn = 1;
            currentScore.runStart = DateTime.Now;
            toggleControlObjects();
        }
    }

    protected override async Task resetGame()
    {
        await jsRuntime.InvokeVoidAsync("setFocus");
        if (gameControl.Enabled) toggleControlObjects();
        currentScore = new Score(_myID);
        game = new AsteroidsField(gameScreen!.getDimensions());
        gameOver = false;
        await gameScreen.clear();
    }

    protected override async Task stopGame()
    {
        gameOver = true;
        toggleControlObjects();
        currentScore.runLength = DateTime.Now - currentScore.runStart;
        if (currentScore.scoreValue > highScore.scoreValue)
        {
            highScore = currentScore;
            await scoreService.setLocalScore(highScore);
        }
        StateHasChanged();
    }

    private void keyDownInputHandler(string dir)
    {
        game.parseKeyDown(dir);
    }

    private void keyUpInputHandler(string dir)
    {
        game.parseKeyUp(dir);
    }

    private string getUIText()
    {
        return "ui text";
    }

    protected async override void runGame(Object? o, ElapsedEventArgs e)
    {
        //currentScore.turn += 1;
        game.updateGameState(currentScore);

        if (game.checkGameOver())
            await stopGame();
    }

    protected async override void drawGame(Object? o, ElapsedEventArgs e)
    {
        await gameScreen.canvasReference.BeginBatchAsync();
        await gameScreen.fillColor("black");

        var ship = ((PlayerShip)game.getPlayer());
        ship.getParts().ForEach(async p => await gameScreen.drawVectorial(p));

        await gameScreen.canvasReference.SetFillStyleAsync("red");
        foreach (var s in ship.shots)
            await gameScreen.canvasReference.FillRectAsync(s.pos.X, s.pos.Y, 10, 10);

        game.asteroids.ForEach(async a => await gameScreen.drawVectorial(a));
        await gameScreen.canvasReference.EndBatchAsync();
    }

    public override void DisposeHarder()
    {
        gameScreen?.Dispose();
    }
}
