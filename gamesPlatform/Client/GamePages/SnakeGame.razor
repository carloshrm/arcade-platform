@page "/snakegame"
@layout ContentLayout
@inject IJSRuntime jsRuntime
@inject IScoreService scoreService

<div id="game-controls">
        <div id="score-display">
            <span> Score:@currentScore?.scoreValue </span>
            @if (highScore?.scoreValue > 0)
            {
                <span> Best: @highScore?.scoreValue  </span>
            }
            <span> Time:@currentScore?.runLength.ToString("mm\\:ss") </span>
        </div>
    <div>
        <button type="button" class="soft-shadow game-button @((turnCount > 0 && turnManager.Enabled) ? "dark-bg" : "")" @onclick=startGame>start</button>
        <button type="button" class="soft-shadow game-button" @onclick=setupNewGame>reset</button>
    </div>
</div>
<div id="game-container" class="soft-shadow" tabindex="0" @onkeydown=@((e) => playerInputHandler(e.Key))>
    <ResponsiveCanvas @ref=_gameScreen appID=AppID.Snake/>
    @if (turnCount > 0 && !turnManager.Enabled)
    {
        <div id="post-game-container" class="dark-bg soft-shadow">
            <h2>Game Over...</h2>
            <h4>Score: @currentScore?.scoreValue</h4>
            <h4>Best: @highScore?.scoreValue</h4>
            <button type="button" @onclick=@(() => { if (highScore?.id != -1) showScoreUpload = true; })>Pin on leaderboard!</button>
            <LeaderboardView appID=AppID.Snake @ref=_leaderboard />
        </div>
        @if (showScoreUpload)
        {
            <ScoreUploadView info=@highScore callback=@uploadCallback/>
        }
    }
</div>
@if (isMobile)
{
    <TouchDPad inputCallback=playerInputHandler />
}

@code {
    private ResponsiveCanvas? _gameScreen;
    private LeaderboardView? _leaderboard;
    private Action<int>? uploadCallback;
    private bool showScoreUpload { get; set; }
    private bool isMobile { get; set; }

    private SnakeBoard? gameBoard;
    private Score? currentScore;
    private Score? highScore;

    private Timer? turnManager;
    private int turnCount { get; set; }
    private bool canMove { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentScore = new Score(AppID.Snake);
        uploadCallback = new Action<int>(refreshAfterUpload);
        isMobile = await jsRuntime.InvokeAsync<bool>("isMobile");
        highScore = await scoreService.readLocalScore(AppID.Snake);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await setupNewGame();
        }
    }

    private void increaseSpeed()
    {
        if (turnManager.Enabled)
            turnManager.Interval = 1300 / gameBoard.snake.size;
    }

    private void refreshAfterUpload(int newID)
    {
        showScoreUpload = false;
        if (newID != -1)
        {
            highScore.id = newID;
            _leaderboard.refresh();
        }
        StateHasChanged();
    }


    private void playerInputHandler(string direction)
    {
        if (turnManager.Enabled && canMove)
        {
            gameBoard.snake.parseMoveCommand(direction);
        }
        canMove = false;
    }

    private void setupTimer()
    {
        if (turnManager != null && turnManager.Enabled)
        {
            turnManager.Dispose();
        }
        turnManager = new Timer(400) { AutoReset = true, Enabled = false };
        turnManager.Elapsed += runTurn;
    }

    private async Task startGame()
    {
        await jsRuntime.InvokeVoidAsync("setFocus");
        if (turnManager.Enabled)
            return;
        else
        {
            if (currentScore.scoreValue > 0)
            {
                currentScore = new Score(AppID.Snake);
                await setupNewGame();
            }
            gameBoard.makeFood();
            turnManager.Enabled = true;
            currentScore.runStart = DateTime.Now;
        }
    }

    private async Task setupNewGame()
    {
        turnCount = 0;
        setupTimer();
        await _gameScreen.setCanvasSize();
        await _gameScreen.clear();
        gameBoard = new SnakeBoard(
            _gameScreen.getDimensions(),
            _gameScreen.baseResolution,
            _gameScreen.canvasReference);
    }

    private async void runTurn(Object? src, ElapsedEventArgs e)
    {
        turnCount++;
        currentScore.runLength = e.SignalTime - currentScore.runStart;
        currentScore.scoreValue += (int)(Math.Ceiling(turnCount / 10.0)) * gameBoard.snake.size;
        gameBoard.snake.setNextSnakePosition();
        await gameBoard.drawGameState();
        if (gameBoard.checkCurrentSpotContents(new Action(increaseSpeed)) == false)
        {
            turnManager.Enabled = false;
            if (currentScore.scoreValue > highScore.scoreValue)
                highScore = currentScore;
        }
        canMove = true;
        StateHasChanged();
    }
}
