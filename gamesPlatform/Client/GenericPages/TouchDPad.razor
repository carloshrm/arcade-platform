@inject IJSRuntime jsRuntime

<div id="mobile_pad">
    <div id="pad_container">

        <button id="pad_bt_down" class="oi oi-chevron-bottom" @ontouchstart=@((e) => clickHandler("s")) @ontouchend=@((e) => releaseHandler("s"))>
        </button>
        <button id="pad_bt_right" class="oi oi-chevron-right" @ontouchstart=@((e) => clickHandler("d")) @ontouchend=@((e) => releaseHandler("d"))>
        </button>
        <button id="pad_bt_left" class="oi oi-chevron-left" @ontouchstart=@((e) => clickHandler("a")) @ontouchend=@((e) => releaseHandler("a"))>
        </button>
        <button id="pad_bt_up" class="oi oi-chevron-top" @ontouchstart=@((e) => clickHandler("w")) @ontouchend=@((e) => releaseHandler("w"))>
        </button>

    </div>
    <button id="pad_bt_ok" class="oi oi-media-record" @ontouchstart=@((e) => clickHandler("spacebar")) @ontouchend=@((e) => releaseHandler("spacebar"))>
    </button>
</div>

@code {
    public delegate void externalClickHandler(string d);
    public delegate void externalReleaseHandler(string d);

    [Parameter]
    public externalClickHandler clickCallback { get; set; }
    [Parameter]
    public externalReleaseHandler releaseCallback { get; set; }

    private void clickHandler(string direction)
    {
        clickCallback(direction);
        jsRuntime.InvokeVoidAsync("vibrateFeedback");
    }

    private void releaseHandler(string direction)
    {
        if (releaseCallback != null)
        {
            releaseCallback(direction);
        }
        else
            return;
    }
}
