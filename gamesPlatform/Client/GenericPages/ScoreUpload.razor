@inject IScoreService scoreService

<div id="score-upload-container">
    <button id="close-upload-button" class="btn game-button" type="button" @onclick=@(() => callback(-1))>X</button>
    <h3>Upload: </h3>
    <p>High Score: @info.scoreValue</p>
    <p>Date: @info.runStart</p>
    <p>Time: @info.runLength.ToString("mm\\:ss")</p>
    <EditForm Model="@info" OnValidSubmit=uploadScore OnInvalidSubmit=@(() => errorMessage = "Too long! 12 characters max.")>
        <DataAnnotationsValidator />
        <p>
            <label>
                Nickname: 
                <InputText @bind-Value="info.nickname" required />
            </label>
            <p id="error-message"> @errorMessage </p>
        </p>
        <button type="submit" id="submit-upload-button" class="btn game-button ">OK</button>
    </EditForm>
</div>



@code {
    [Parameter] public Score info { get; set; }
    [Parameter] public Action<int> callback { get; set; }

    private string errorMessage = "";

    private async Task uploadScore()
    {
        if (info.id != -1) 
            return;
        else
        {
            try
            {
                if (info.nickname.Length == 0) info.nickname = "|❛ ᴗ ❛.)";  
                int newID = await scoreService.setScore(info);
                callback(newID);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                errorMessage = "Upload failed, try again later.";
            }
        }
    }
}
