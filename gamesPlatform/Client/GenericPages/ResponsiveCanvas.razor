@inject IConfiguration appConfig
@inject IJSRuntime jsRuntime
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D

<BECanvas Width="@windowSize" Height="@windowSize" @ref="_componentReference" />

@code {
    private BECanvasComponent? _componentReference { get; set; }
    public Canvas2DContext? _canvasReference { get; set; }

    public int windowSize { get; set; }
    public (int r, int c) configLimits { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _canvasReference = await _componentReference.CreateCanvas2DAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await setCanvasSize();
        readConfigValues();
    }

    private void readConfigValues()
    {
        configLimits = (int.Parse(appConfig["snake-board-width"]),
                        int.Parse(appConfig["snake-board-height"]));
    }

    public async Task setCanvasSize()
    {
        double windowWidth = await jsRuntime.InvokeAsync<long>("getWindowWidth");
        double windowHeight = await jsRuntime.InvokeAsync<long>("getWindowHeight");

        windowWidth = (windowWidth * 0.088) * 10;
        windowHeight = (windowHeight * 0.088) * 10;

        if (windowHeight >= windowWidth)
            windowSize = (int)(windowWidth - (windowWidth % configLimits.c));
        else
            windowSize = (int)(windowHeight - (windowHeight % configLimits.r));

        StateHasChanged();
    }

    public async Task clear()
    {
        await _canvasReference.ClearRectAsync(0, 0, _componentReference.Width, _componentReference.Height);
    }

    public (int, int) getDimensions()
    {
        return ((int)_componentReference.Width, (int)_componentReference.Height);
    }
}
