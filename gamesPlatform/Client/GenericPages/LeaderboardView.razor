@inject IScoreService scoreService

<table id="leaderboard-container" 
    class="table table-striped">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name:</th>
            <th scope="col">Score:</th>
            <th scope="col">Date Set:</th>
            <th scope="col">Run Time:</th>
        </tr>
    </thead>
    <tbody>
        @if (localLeaderboard.Count == 0)
        {
            <tr>
                <td>Loading...</td>
            </tr>
        }
        else
        {
            @for (var i = 0; i < localLeaderboard.Count; i++)
            {
                Score sr = localLeaderboard[i];
                <tr scope="row">
                    <td>@(i + 1)</td>
                    <td>@sr.nickname</td>
                    <td>@sr.scoreValue</td>
                    <td>@sr.runStart.ToShortDateString()</td>
                    <td>@(sr.runLength.Minutes)m:@(sr.runLength.Seconds)s</td>
                </tr>
                if (i == 5) break;
            }
        }
    </tbody>
</table>

@code {
    private List<Score> localLeaderboard { get; set; } = new List<Score>();

    [Parameter]
    public int appID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var databaseLeaderboard = await scoreService.getLeaderboard(appID);
        localLeaderboard = databaseLeaderboard.OrderBy(x => x.scoreValue).ToList();
    }

}
