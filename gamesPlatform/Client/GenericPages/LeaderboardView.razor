@inject IScoreService scoreService
<div id="leaderboard-container" class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name:</th>
                <th scope="col">Score:</th>
                <th scope="col">Date Set:</th>
                <th scope="col">Run Time:</th>
            </tr>
        </thead>
        <tbody>
            @if (localLeaderboard.Count == 0)
            {
                <tr>
                    <td colspan="5">@statusMessage</td>
                </tr>
            }
            else
            {
                @for (var i = 0; i < localLeaderboard.Count; i++)
                {
                    Score sr = localLeaderboard[i];
                    <tr scope="row">
                        <td>@(i + 1)</td>
                        <td>@sr.nickname</td>
                        <td>@sr.scoreValue</td>
                        <td>@sr.runStart.ToShortDateString()</td>
                        <td>@(sr.runLength.Minutes)m:@(sr.runLength.Seconds)s</td>
                    </tr>
                    if (i == 5) break;
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<Score> localLeaderboard { get; set; } = new List<Score>();
    private string statusMessage = "Loading...";

    [Parameter]
    public AppID appID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await refresh();
    }

    public async Task refresh()
    {
        try
        {
            var databaseLeaderboard = await scoreService.getLeaderboard(appID);
            if (databaseLeaderboard.Count() == 0)
                statusMessage = "No scores have been registered yet.";
            else
                localLeaderboard = databaseLeaderboard.OrderByDescending(x => x.scoreValue).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            statusMessage = "Leaderboard currently unavailable.";
        }
        finally
        {
            StateHasChanged();
        }
    }
}
