@inject IConfiguration appConfig
@inject IJSRuntime jsRuntime
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@implements IDisposable

<BECanvas Width="@componentWidth" Height="@componentHeight" @ref="_componentReference" />

@code {
    [Parameter] public AppID appID { get; set; }

    private BECanvasComponent? _componentReference { get; set; }
    public Canvas2DContext? canvasReference { get; set; }
    public Dictionary<string, ElementReference> assets;

    public GameCanvas()
    {
        assets = new Dictionary<string, ElementReference>();
    }

    public int componentWidth { get; set; }
    public int componentHeight { get; set; }
    public long windowWidth { get; set; }
    public long windowHeight { get; set; }
    public (int r, int c) baseResolution { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            canvasReference = await _componentReference.CreateCanvas2DAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await readConfigValues();
    }

    private async Task readConfigValues()
    {
        foreach (var setting in appConfig.GetSection("games").GetChildren())
        {
            if (setting.GetValue<AppID>("id") == appID)
            {
                baseResolution = (
                    setting.GetValue<int>("size:width"),
                    setting.GetValue<int>("size:height"));
                break;
            }
        }        
    }

    public async Task setCanvasSize()
    {
        windowWidth = await jsRuntime.InvokeAsync<long>("getWindowWidth");
        windowHeight = await jsRuntime.InvokeAsync<long>("getWindowHeight");

        if (appID == AppID.Snake)
        {
            int width = (int)(windowWidth * 0.080) * 10;
            int height = (int)(windowHeight * 0.080) * 10;

            if (height <= width)
            {
                componentWidth = height - (height % baseResolution.c);
                componentHeight = height - (height % baseResolution.r);
            }
            else
            {
                componentWidth = width - (width % baseResolution.c);
                componentHeight = width - (width % baseResolution.r);
            }
        }
        else
        {
            (componentWidth, componentHeight) = baseResolution;
        }
        StateHasChanged();
    }

    public async Task drawObject(IGameObject obj)
    {
        // renders from the top left
        await canvasReference.DrawImageAsync(
            assets[obj.model.spriteId], // asset image reference
            obj.spriteSelect * obj.model.width, obj.model.height * 0, // asset position on referenced image
            obj.model.width, obj.model.height, // asset size on image
            obj.pos.X, obj.pos.Y, // canvas x and y coords for rendering
            obj.model.width, obj.model.height); // size for rendering in canvas
        if (obj.decals != null)
        {
            foreach (var d in obj.decals)
            {
                int widthPadding = d.width < obj.model.width ? (d.width / -2) + ((obj.model.width) / 2) : 0;
                int heightPadding = d.height < obj.model.height ? (d.height / -2) + ((obj.model.height) / 2) : 0;
                await canvasReference.DrawImageAsync(
                    assets[d.spriteId], 0, 0, d.width, d.height,
                    obj.pos.X + widthPadding, obj.pos.Y + heightPadding,
                    d.width, d.height);
            }
        }
    }

    public async Task drawSet(IEnumerable<IGameObject> list)
    {
        foreach (var o in list)
        {
            await drawObject(o);
        }
    }

    public async Task clear()
    {
        await canvasReference.ClearRectAsync(0, 0, _componentReference.Width, _componentReference.Height);
    }

    public async Task fillColor(string color)
    {
        var previousStyle = canvasReference.FillStyle;
        await canvasReference.SetFillStyleAsync(color);
        await canvasReference.FillRectAsync(0, 0, _componentReference.Width, _componentReference.Height);
        await canvasReference.SetFillStyleAsync(previousStyle);
    }

    public async Task fillTextStyleOverride(string text, double x, double y, string font, string style = "")
    {
        if (canvasReference == null) return;

        var previousStyle = canvasReference.FillStyle;
        var previousFont = canvasReference.Font;

        await canvasReference.SetFontAsync(font);
        await canvasReference.SetFillStyleAsync(style == "" ? previousStyle : style);

        await canvasReference.FillTextAsync(text, x, y);

        await canvasReference.SetFillStyleAsync(previousStyle);
        await canvasReference.SetFontAsync(previousFont);
    }

    public (int y, int x) getDimensions()
    {
        return (y: componentHeight, x: componentWidth);
    }

    public (int, int) getScreenSize()
    {
        return ((int)windowWidth, (int)windowHeight);
    }

    public void Dispose()
    {
        canvasReference?.Dispose();
    }
}
