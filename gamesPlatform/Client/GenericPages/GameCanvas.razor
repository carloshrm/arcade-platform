@inject IConfiguration appConfig
@using System.Runtime.InteropServices.JavaScript
@implements IDisposable

<canvas id="game-display-canvas" @ref=@displayCanvas width=@componentWidth height=@componentHeight />

@code {
    [Parameter] public AppID appID { get; set; }

    private ElementReference displayCanvas { get; set; }
    private Queue<Action> _renderQueue = new();

    public float componentWidth { get; set; }
    public float componentHeight { get; set; }
    public float windowWidth { get; set; }
    public float windowHeight { get; set; }
    public (int r, int c) baseResolution { get; set; }
    public (float r, float c) scaleFactor { get; set; } = (1, 1);

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            CanvasContext.SetupContext();
        }
    }

    protected override void OnInitialized()
    {
        ReadConfigurationValues();
        SetCanvasSize();
    }

    private void ReadConfigurationValues()
    {
        var config = appConfig
            .GetSection("games")
            .GetChildren()
            .FirstOrDefault(s => s.GetValue<AppID>("id") == appID);
        if (config != null)
            baseResolution = (config.GetValue<int>("size:width"), config.GetValue<int>("size:height"));
    }

    public void SetCanvasSize()
    {
        windowWidth = GetWindowWidth();
        windowHeight = GetWindowHeight();

        int screenLimit = Math.Min((int)(windowWidth * 0.08) * 10, (int)(windowHeight * 0.08) * 10);
        (componentWidth, componentHeight) = appID switch
        {
            var app when app is AppID.Snake || app is AppID.Tetris
                => (screenLimit - (screenLimit % baseResolution.c), screenLimit - (screenLimit % baseResolution.r)),
            _ => baseResolution
        };
        StateHasChanged();
        SetupScaleFactor();
    }

    public void RenderQueue()
    {
        CanvasContext.StartBatch();
        while (_renderQueue.TryDequeue(out Action renderStep))
            renderStep.Invoke();

        CanvasContext.EndBatch();
    }

    public void DrawScaledRectColored(float c, float r, string color)
    {
        _renderQueue.Enqueue(() =>
        {
            CanvasContext.SetFillStyle(color);
            CanvasContext.FillRect(c * scaleFactor.c, r * scaleFactor.r, scaleFactor.c, scaleFactor.r);
        });
    }

    public void DrawScaledRect(float c, float r)
    {
        _renderQueue.Enqueue(() => CanvasContext.FillRect(c * scaleFactor.c, r * scaleFactor.r, scaleFactor.c, scaleFactor.r));
    }

    public void DrawScaledObject(ISimpleGameObject obj)
    {
        _renderQueue.Enqueue(() =>
        {
            CanvasContext.SetFillStyle(obj.model.color);
            CanvasContext.FillRect(obj.pos.X * scaleFactor.c, obj.pos.Y * scaleFactor.r, scaleFactor.c, scaleFactor.r);
        });
    }

    public void DrawSimpleImage(string assetID, float x, float y)
    {
        _renderQueue.Enqueue(() => CanvasContext.DrawImage(assetID, x, y));
    }

    public void DrawSimpleImage(string assetID, float x, float y, float w, float h)
    {
        _renderQueue.Enqueue(() => CanvasContext.DrawImage(assetID, x, y, w, h));
    }


    public void DrawObject(IGameObject obj)
    {
        // renders from the top left
        _renderQueue.Enqueue(() =>
        {
            CanvasContext.DrawImage(
                obj.model.spriteId, // asset image reference
                obj.spriteSelect * obj.model.width, obj.model.height * 0, // asset position on referenced image, height not used yet
                obj.model.width, obj.model.height, // asset size on image
                obj.pos.X, obj.pos.Y, // canvas x and y coords for rendering
                obj.model.width, obj.model.height); // size for rendering in canvas
            if (obj.decals != null)
            {
                foreach (var d in obj.decals)
                {
                    int widthPadding = d.width < obj.model.width ? (d.width / -2) + ((obj.model.width) / 2) : 0;
                    int heightPadding = d.height < obj.model.height ? (d.height / -2) + ((obj.model.height) / 2) : 0;
                    CanvasContext.DrawImage(d.spriteId, 0, 0, d.width, d.height, 
                        obj.pos.X + widthPadding, obj.pos.Y + heightPadding, d.width, d.height);
                }
            }
        });
    }

    public void DrawObject(IDrawable obj, Vector2 pos)
    {
        // renders from the top left
        _renderQueue.Enqueue(() =>
        {
            CanvasContext.DrawImage(
                obj.model.spriteId, // asset image reference
                obj.spriteSelect * obj.model.width, obj.model.height * 0, // asset position on referenced image, height not used yet
                obj.model.width, obj.model.height, // asset size on image
                pos.X, pos.Y, // canvas x and y coords for rendering
                obj.model.width, obj.model.height); // size for rendering in canvas
            if (obj.decals != null)
            {
                foreach (var d in obj.decals)
                {
                    int widthPadding = d.width < obj.model.width ? (d.width / -2) + ((obj.model.width) / 2) : 0;
                    int heightPadding = d.height < obj.model.height ? (d.height / -2) + ((obj.model.height) / 2) : 0;
                    CanvasContext.DrawImage(d.spriteId, 0, 0, d.width, d.height,
                        pos.X + widthPadding, pos.Y + heightPadding,d.width, d.height);
                }
            }
        });
    }

    public void DrawVectorialObject(ISimpleVectorialObject obj)
    {
        _renderQueue.Enqueue(() =>
        {
            CanvasContext.BeginPath();
            var toBeMirrored = new List<ISimpleVectorialObject>();

            bool first = true;
            foreach (var pt in obj.model.points)
            {

                if (first)
                {
                    CanvasContext.MoveTo(pt.X + obj.pos.X, pt.Y + obj.pos.Y);
                    first = false;
                }
                CanvasContext.LineTo(pt.X + obj.pos.X, pt.Y + obj.pos.Y);
            }
            CanvasContext.ClosePath();

            CanvasContext.SetStrokeStyle(obj.model.strokeColor);
            CanvasContext.Stroke();

            if (obj.model.fillColor != null)
            {
                CanvasContext.SetFillStyle(obj.model.fillColor);
                CanvasContext.Fill();
            }
        });
    }

    public void DrawVectorialSet(IEnumerable<ISimpleVectorialObject> list)
    {
        foreach (var obj in list)
            DrawVectorialObject(obj);
    }

    public void DrawObjectSet(IEnumerable<IGameObject> list)
    {
        foreach (var o in list)
            DrawObject(o);
    }

    public void ClearRect(float x, float y, float width, float height)
    {
        _renderQueue.Enqueue(() => CanvasContext.ClearRect(x, y, width, componentHeight));
    }

    public void ForceCanvasClear()
    {
        CanvasContext.ClearCanvas();
        _renderQueue.Clear();
    }

    public void FillCanvas(string color)
    {
        _renderQueue.Enqueue(() =>
        {
            CanvasContext.SetFillStyle(color);
            CanvasContext.FillRect(0, 0, componentWidth, componentHeight);
        });
    }

    public void FillText(string text, float x, float y)
    {
        _renderQueue.Enqueue(() => CanvasContext.FillText(text, x, y));
    }

    public void FillTextExtended(string text, float x, float y, (string font, string color) style, int linePadding = 0)
    => FillTextExtended(text, x, y, style.font, style.color, linePadding);

    public void FillTextExtended(string text, float x, float y, string font, string style, int linePadding = 0)
    {
        _renderQueue.Enqueue(() =>
        {
            CanvasContext.SetFont(font);
            CanvasContext.SetFillStyle(style);

            var lines = text.Split('\n');
            int yOffset = int.Parse(font.Substring(0, font.IndexOf("px"))) + linePadding;
            for (int i = 0; i < lines.Length; i++)
            {
                CanvasContext.FillText(lines[i], x, y + (yOffset * i));
            }
        });
    }

    public void SetupScaleFactor()
    {
        scaleFactor = (componentHeight / baseResolution.r, componentWidth / baseResolution.c);
        if (scaleFactor.c == 0 || scaleFactor.r == 0)
            scaleFactor = (1, 1);
    }

    public (float y, float x) GetDimensions()
    {
        return (y: componentHeight, x: componentWidth);
    }

    public void Dispose()
    {
        //
    }
}
