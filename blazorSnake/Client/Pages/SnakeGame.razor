@page "/snakegame"
@layout ContentLayout
@inject IJSRuntime JSRUN
@inject IConfiguration CONFIG
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Timers
@using Microsoft.Extensions.Configuration


<div id="game-controls">
    <h3 id="score-display">Score:@currentScore  Time:@timeDisplay</h3>
    <div>
        <button class="soft-shadow game-button @((turnCount > 0 && turnManager.Enabled) ? "dark-bg" : "")" @onclick=startGame>start</button>
        <button class="soft-shadow game-button" @onclick=setupNewGame>reset</button>
    </div>
</div>
<div id="snake-container" class="soft-shadow" tabindex="0" @onkeydown=readPlayerInput>
    @if (turnCount > 0 && !turnManager.Enabled)
    {
        <div id="game-over" class="dark-bg soft-shadow">
            <h2>Game Over</h2>
            <h4>Highest Score: @highestScore</h4>
        </div>
    }
    <BECanvas Width="@windowSize" Height="@windowSize" @ref="_canvasReference" />
</div>

@code {
    protected BECanvasComponent? _canvasReference { get; set; }
    private Canvas2DContext? _canvas { get; set; }
    private int windowSize { get; set; }
    private (int r, int c) configLimits { get; set; }

    private SnakeBoard? gameBoard { get; set; }
    private Timer? turnManager { get; set; }
    private DateTime startTime { get; set; }
    private string timeDisplay { get; set; }   

    private bool canMove { get; set; }
    private int turnCount { get; set; }
    private long currentScore { get; set; }
    private long highestScore { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await setCanvasSize();
        configLimits = (
            int.Parse(CONFIG["snake-board-width"]),
            int.Parse(CONFIG["snake-board-height"]));
        Console.WriteLine(configLimits);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _canvas = await _canvasReference.CreateCanvas2DAsync();
            await setupNewGame();
        }
    }

    private async Task setCanvasSize()
    {
        double windowWidth = await JSRUN.InvokeAsync<long>("getWindowWidth");
        double windowHeight = await JSRUN.InvokeAsync<long>("getWindowHeight");

        if (windowHeight <= 500 || windowWidth <= 500)
            windowSize = (int) 460;
        else 
        {
            windowWidth = (windowWidth * 0.08) * 10;
            windowHeight = (windowHeight * 0.08) * 10;
            if (windowHeight >= windowWidth)
            {
                windowSize = (int)(windowWidth - (windowWidth % configLimits.c));
            }
            else
            {
                windowSize = (int)(windowHeight - (windowHeight % configLimits.r)); ;
            }
        }
        StateHasChanged();
    }

    private void readPlayerInput(KeyboardEventArgs e)
    {
        if (turnManager.Enabled && canMove)
        {
            gameBoard?.snake.parseMoveCommand(e.Key);
            canMove = false;
        }
    }

    private void setupTimer()
    {
        if (turnManager != null && turnManager.Enabled)
        {
            turnManager.Dispose();
        }
        turnManager = new Timer(400) { AutoReset = true, Enabled = false };
        turnManager.Elapsed += runTurn;
    }

    private async Task startGame()
    {
        await JSRUN.InvokeVoidAsync("setFocus");
        if (turnManager.Enabled)
            return;
        else
        {
            if (currentScore > 0)
                await setupNewGame();
            gameBoard.makeFood();
            turnManager.Enabled = true;
            startTime = DateTime.Now;
        }
    }

    private async Task setupNewGame()
    {
        turnCount = 0;
        currentScore = 0;
        setupTimer();
        await setCanvasSize();
        await _canvas.ClearRectAsync(0, 0, _canvasReference.Width, _canvasReference.Height);
        gameBoard = new SnakeBoard((int)_canvasReference.Width, (int)_canvasReference.Height, configLimits);
        gameBoard.setContext(_canvas);
        gameBoard.newPlayer(new SnakePlayer(2));
    }

    private void increaseSpeed()
    {
        if (turnManager.Enabled)
            turnManager.Interval = 1500 / gameBoard.snake.size;
    }

    private async void runTurn(Object? src, ElapsedEventArgs e)
    {
        timeDisplay = (e.SignalTime - startTime).ToString("mm\\:ss");
        turnCount++;
        currentScore += turnCount * gameBoard.snake.size;
        gameBoard.snake.setNextSnakePosition();
        await gameBoard.drawGameState();
        if (!gameBoard.checkSpot(new Action(increaseSpeed)))
        {
            turnManager.Enabled = false;
            if (currentScore > highestScore)
            {
                highestScore = currentScore;
            }
        }
        canMove = true;
        StateHasChanged();
    }
}
