@page "/snakegame"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D

@inject IJSRuntime JSRUN

<div @onkeydown=showKey tabindex="0" id="snake_container">
    <h2>score @score</h2>
    <button @onclick=startGame>start</button>
    <div id="snake_canvas" style="position: fixed; opacity: 1; background-color: ivory; width: 100%; height: 100%">
        <BECanvas Width="800" Height="800" @ref="_canvasReference"></BECanvas>
    </div>
</div>

@code {
    private Canvas2DContext _canvas;
    protected BECanvasComponent _canvasReference;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this._canvas = await this._canvasReference.CreateCanvas2DAsync();
            game = new Board((int)_canvasReference.Width, (int)_canvasReference.Height);
            game.setContext(_canvas);
            game.newPlayer(new Snake(2));
        }
        Console.WriteLine("after render");
    }

    private void showKey(KeyboardEventArgs e)
    {
        if (turnControl != null)
        {
            game.snake.parseMoveCommand(e.Key);            
        }
        Console.WriteLine(e.Key);
    }

    private int turnCount { get; set; } = 0;
    private int score { get; set; } = 0;
    private Timer? turnControl;
    private Board? game { get; set; }

    private void startGame()
    {
        if (game != null)
        {
            game.placeSnakeOnStart();
            game.makeFood();
            game.drawBoardEdges();
            turnCount = 0;
            turnControl = new Timer(new TimerCallback(runTurn), null, 0, (int)(100 * (game.snake.size * 0.6)));
        }
    }

    private void updateDifficulty()
    {
        if (turnControl != null)
            turnControl.Change(0, (int)(100 * (game.snake.size * 0.6)));
    }

    private async void runTurn(Object state)
    {
        Console.WriteLine($"Turn {turnCount}");
        Console.WriteLine($"size {game.snake.size} score {score}");
        turnCount++;
        score += turnCount * game.snake.size;
        game.snake.setNextSnakePosition();
        await game.drawGameState();
        if (!game.checkSpot())
        {
            turnControl.Dispose();
        }
        StateHasChanged();
    }
}
