@page "/snakegame/{start:bool?}"
@layout ContentLayout
@inject IJSRuntime JSRUN
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Timers


<div id="game-controls">
    <h3 id="score-display">Score: @currentScore</h3>
    <div>
        <button class="soft-shadow game-button @((turnCount > 0 && turnControl.Enabled) ? "dark-bg" : "")" @onclick=startGame>start</button>
        <button class="soft-shadow game-button" @onclick=setupNewGame>reset</button>
    </div>
</div>
<div id="snake-container" class="soft-shadow" tabindex="0" @onkeydown=readPlayerInput>
    @if (turnCount > 0 && !turnControl.Enabled)
    {
        <div id="game-over" class="dark-bg soft-shadow">
            <h2>Game Over</h2>
        </div>
    }
    <BECanvas Width="@windowSize.w" Height="@windowSize.h" @ref="_canvasReference" />
</div>

@code {
    [Parameter]
    public bool start { get; set; }

    private bool canMove { get; set; }
    private long currentScore { get; set; }
    private (int w, int h) windowSize { get; set; }
    private int turnCount { get; set; }
    private Timer? turnControl { get; set; }
    private Board? gameBoard { get; set; }
    private Canvas2DContext _canvas { get; set; }
    protected BECanvasComponent _canvasReference { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await setCanvasSize();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _canvas = await _canvasReference.CreateCanvas2DAsync();
            await setupNewGame();
            if (start)
                startGame();
        }
    }

    private async Task setCanvasSize()
    {
        windowSize = (
            (int)(await JSRUN.InvokeAsync<long>("getWindowWidth") * 0.80),
            (int)(await JSRUN.InvokeAsync<long>("getWindowHeight") * 0.80)
            );
        StateHasChanged();
    }

    private void readPlayerInput(KeyboardEventArgs e)
    {
        Console.WriteLine(e.Key);
        if (turnControl.Enabled && canMove)
        {
            gameBoard?.snake.parseMoveCommand(e.Key);
            canMove = false;
        }
    }

    private void setupTimer()
    {
        if (turnControl != null && turnControl.Enabled)
        {
            turnControl.Dispose();
        }
        turnControl = new Timer(400) { AutoReset = true, Enabled = false };
        turnControl.Elapsed += runTurn;
    }

    private async void startGame()
    {
        await JSRUN.InvokeVoidAsync("setFocus");
        if (turnControl.Enabled)
            return;
        else
        {
            await setupNewGame();
            gameBoard.makeFood();
            turnControl.Enabled = true;
        }
    }

    private async Task setupNewGame()
    {
        turnCount = 0;
        currentScore = 0;
        setupTimer();
        await setCanvasSize();
        await _canvas.ClearRectAsync(0, 0, _canvasReference.Width, _canvasReference.Height);
        gameBoard = new Board((int)_canvasReference.Width, (int)_canvasReference.Height);
        gameBoard.setContext(_canvas);
        gameBoard.newPlayer(new Snake(2));
    }

    private void increaseSpeed()
    {
        if (turnControl.Enabled)
            turnControl.Interval = 1500 / gameBoard.snake.size;
    }

    private async void runTurn(Object? src, ElapsedEventArgs e)
    {
        turnCount++;
        currentScore += turnCount * gameBoard.snake.size;
        gameBoard.snake.setNextSnakePosition();
        await gameBoard.drawGameState();
        if (!gameBoard.checkSpot(new Action(increaseSpeed)))
        {
            turnControl.Enabled = false;
        }
        canMove = true;
        StateHasChanged();
    }
}
